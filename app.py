import streamlit as st
import pandas as pd
import time
import matplotlib.pyplot as plt
from openpyxl.utils.dataframe import dataframe_to_rows
import io
from rapidfuzz import fuzz
import os
from openpyxl import load_workbook
from langchain.prompts import PromptTemplate
from langchain_core.runnables import RunnablePassthrough
from transformers import pipeline
from io import StringIO, BytesIO
import sys
import contextlib
from langchain_openai import ChatOpenAI  # Updated import
import pdfkit
from jinja2 import Template


def create_download_section(excel_data, output_capture):
    st.markdown("""
        <style>
        .download-container {
            padding: 20px;
            background-color: #f0f2f6;
            border-radius: 10px;
            margin: 20px 0;
        }
        .download-header {
            color: #0066cc;
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 10px;
        }
        </style>
        <div class="download-container">
            <div class="download-header">üì• –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≥–æ—Ç–æ–≤—ã –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é:</div>
        </div>
    """, unsafe_allow_html=True)

    col1, col2 = st.columns(2)
    
    with col1:
        if excel_data is not None:
            st.download_button(
                label="üìä –°–∫–∞—á–∞—Ç—å Excel –æ—Ç—á–µ—Ç",
                data=excel_data,
                file_name="—Ä–µ–∑—É–ª—å—Ç–∞—Ç_–∞–Ω–∞–ª–∏–∑–∞.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                key="excel_download"
            )
        else:
            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞")
    
    with col2:
        try:
            pdf_data = generate_pdf_report(output_capture.texts)
            if pdf_data:
                st.download_button(
                    label="üìÑ –°–∫–∞—á–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª",
                    data=pdf_data,
                    file_name="–ø—Ä–æ—Ç–æ–∫–æ–ª_–∞–Ω–∞–ª–∏–∑–∞.pdf" if isinstance(pdf_data, bytes) else "–ø—Ä–æ—Ç–æ–∫–æ–ª_–∞–Ω–∞–ª–∏–∑–∞.txt",
                    mime="application/pdf" if isinstance(pdf_data, bytes) else "text/plain",
                    key="pdf_download"
                )
            else:
                st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {str(e)}")

def display_sentiment_results(row, sentiment, impact=None, reasoning=None):
    if sentiment == "Negative":
        st.markdown(f"""
            <div style='color: red; font-weight: bold;'>
            –û–±—ä–µ–∫—Ç: {row['–û–±—ä–µ–∫—Ç']}<br>
            –ù–æ–≤–æ—Å—Ç—å: {row['–ó–∞–≥–æ–ª–æ–≤–æ–∫']}<br>
            –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {sentiment}<br>
            {"–≠—Ñ—Ñ–µ–∫—Ç: " + impact + "<br>" if impact else ""}
            {"–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: " + reasoning + "<br>" if reasoning else ""}
            </div>
            """, unsafe_allow_html=True)
    elif sentiment == "Positive":
        st.markdown(f"""
            <div style='color: green; font-weight: bold;'>
            –û–±—ä–µ–∫—Ç: {row['–û–±—ä–µ–∫—Ç']}<br>
            –ù–æ–≤–æ—Å—Ç—å: {row['–ó–∞–≥–æ–ª–æ–≤–æ–∫']}<br>
            –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {sentiment}<br>
            </div>
            """, unsafe_allow_html=True)
    else:
        st.write(f"–û–±—ä–µ–∫—Ç: {row['–û–±—ä–µ–∫—Ç']}")
        st.write(f"–ù–æ–≤–æ—Å—Ç—å: {row['–ó–∞–≥–æ–ª–æ–≤–æ–∫']}")
        st.write(f"–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {sentiment}")
    
    st.write("---")


class StreamlitCapture:
    def __init__(self):
        self.texts = []
    
    def write(self, text):
        if text and str(text).strip():  # Only capture non-empty text
            self.texts.append(str(text))
    
    def flush(self):
        pass



def generate_pdf_report(texts):
    try:
        import pdfkit
        from jinja2 import Template
        
        html_content = """
        <html>
        <head>
            <meta charset="UTF-8">
            <style>
                body { font-family: Arial, sans-serif; }
                .content { margin: 20px; }
            </style>
        </head>
        <body>
            <div class="content">
                {% for text in texts %}
                    <p>{{ text }}</p>
                {% endfor %}
            </div>
        </body>
        </html>
        """
        
        template = Template(html_content)
        rendered_html = template.render(texts=texts)
        
        # Create PDF in memory
        pdf_data = pdfkit.from_string(rendered_html, False)
        return pdf_data
        
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF –æ—Ç—á–µ—Ç: {str(e)}")
        # Return the text as bytes if PDF generation fails
        return '\n'.join(texts).encode('utf-8')
    
# Initialize sentiment analyzers
finbert = pipeline("sentiment-analysis", model="ProsusAI/finbert")
roberta = pipeline("sentiment-analysis", model="cardiffnlp/twitter-roberta-base-sentiment")
finbert_tone = pipeline("sentiment-analysis", model="yiyanghkust/finbert-tone")


def translate_text(llm, text):
    template = """
    Translate this Russian text into English:
    "{text}"
    
    Your response should contain only the English translation.
    """
    prompt = PromptTemplate(template=template, input_variables=["text"])
    chain = prompt | llm | RunnablePassthrough()
    response = chain.invoke({"text": text})
    
    # Handle different response types
    if hasattr(response, 'content'):  # If it's an AIMessage object
        return response.content.strip()
    elif isinstance(response, str):    # If it's a string
        return response.strip()
    else:
        return str(response).strip()   # Convert any other type to string

def get_mapped_sentiment(result):
    label = result['label'].lower()
    if label in ["positive", "label_2", "pos", "pos_label"]:
        return "Positive"
    elif label in ["negative", "label_0", "neg", "neg_label"]:
        return "Negative"
    return "Neutral"

def analyze_sentiment(text):
    finbert_result = get_mapped_sentiment(finbert(text, truncation=True, max_length=512)[0])
    roberta_result = get_mapped_sentiment(roberta(text, truncation=True, max_length=512)[0])
    finbert_tone_result = get_mapped_sentiment(finbert_tone(text, truncation=True, max_length=512)[0])
    
    # Consider sentiment negative if any model says it's negative
    if any(result == "Negative" for result in [finbert_result, roberta_result, finbert_tone_result]):
        return "Negative"
    elif all(result == "Positive" for result in [finbert_result, roberta_result, finbert_tone_result]):
        return "Positive"
    return "Neutral"


def fuzzy_deduplicate(df, column, threshold=65):
    seen_texts = []
    indices_to_keep = []
    for i, text in enumerate(df[column]):
        if pd.isna(text):
            indices_to_keep.append(i)
            continue
        text = str(text)
        if not seen_texts or all(fuzz.ratio(text, seen) < threshold for seen in seen_texts):
            seen_texts.append(text)
            indices_to_keep.append(i)
    return df.iloc[indices_to_keep]

def init_langchain_llm():
    try:
        if 'groq_key' in st.secrets:
            groq_api_key = st.secrets['groq_key']
        else:
            st.error("Groq API key not found in Hugging Face secrets. Please add it with the key 'groq_key'.")
            st.stop()

        llm = ChatOpenAI(
            base_url="https://api.groq.com/openai/v1",
            model="llama-3.1-70b-versatile",
            openai_api_key=groq_api_key,  # Updated parameter name
            temperature=0.0
        )
        return llm
    except Exception as e:
        st.error(f"Error initializing the Groq LLM: {str(e)}")
        st.stop()

def estimate_impact(llm, news_text, entity):
    template = """
    Analyze the following news piece about the entity "{entity}" and estimate its monetary impact in Russian rubles for this entity in the next 6 months.
    
    If precise monetary estimate is not possible, categorize the impact as one of the following:
    1. "–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∏—Å–∫ —É–±—ã—Ç–∫–æ–≤" 
    2. "–£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫ —É–±—ã—Ç–∫–æ–≤"
    3. "–ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∏—Å–∫ —É–±—ã—Ç–∫–æ–≤"
    4. "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–±—ã–ª–∏"
    5. "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç"

    Provide brief reasoning (maximum 100 words).

    News: {news}

    Your response should be in the following format:
    Impact: [Your estimate or category]
    Reasoning: [Your reasoning]
    """
    prompt = PromptTemplate(template=template, input_variables=["entity", "news"])
    chain = prompt | llm
    response = chain.invoke({"entity": entity, "news": news_text})
    
    impact = "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç"
    reasoning = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ"
    
    # Extract content from response
    response_text = response.content if hasattr(response, 'content') else str(response)
    
    try:
        if "Impact:" in response_text and "Reasoning:" in response_text:
            impact_part, reasoning_part = response_text.split("Reasoning:")
            impact = impact_part.split("Impact:")[1].strip()
            reasoning = reasoning_part.strip()
    except Exception as e:
        st.error(f"Error parsing LLM response: {str(e)}")
    
    return impact, reasoning

def format_elapsed_time(seconds):
    hours, remainder = divmod(int(seconds), 3600)
    minutes, seconds = divmod(remainder, 60)
    
    time_parts = []
    if hours > 0:
        time_parts.append(f"{hours} —á–∞—Å{'–æ–≤' if hours != 1 else ''}")
    if minutes > 0:
        time_parts.append(f"{minutes} –º–∏–Ω—É—Ç{'' if minutes == 1 else '—ã' if 2 <= minutes <= 4 else ''}")
    if seconds > 0 or not time_parts:
        time_parts.append(f"{seconds} —Å–µ–∫—É–Ω–¥{'–∞' if seconds == 1 else '—ã' if 2 <= seconds <= 4 else ''}")
    
    return " ".join(time_parts)

def generate_sentiment_visualization(df):
    negative_df = df[df['Sentiment'] == 'Negative']
    
    if negative_df.empty:
        st.warning("–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π. –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–±—ä–µ–∫—Ç–∞–º.")
        entity_counts = df['–û–±—ä–µ–∫—Ç'].value_counts()
    else:
        entity_counts = negative_df['–û–±—ä–µ–∫—Ç'].value_counts()
    
    if len(entity_counts) == 0:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.")
        return None
    
    fig, ax = plt.subplots(figsize=(12, max(6, len(entity_counts) * 0.5)))
    entity_counts.plot(kind='barh', ax=ax)
    ax.set_title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ –æ–±—ä–µ–∫—Ç–∞–º')
    ax.set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π')
    plt.tight_layout()
    return fig

def process_file(uploaded_file):
    output_capture = StreamlitCapture()
    old_stdout = sys.stdout
    sys.stdout = output_capture
    
    try:
        df = pd.read_excel(uploaded_file, sheet_name='–ü—É–±–ª–∏–∫–∞—Ü–∏–∏')

        required_columns = ['–û–±—ä–µ–∫—Ç', '–ó–∞–≥–æ–ª–æ–≤–æ–∫', '–í—ã–¥–µ—Ä–∂–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞']
        missing_columns = [col for col in required_columns if col not in df.columns]
        if missing_columns:
            st.error(f"Error: The following required columns are missing from the input file: {', '.join(missing_columns)}")
            st.stop()
    
        # Initialize LLM
        llm = init_langchain_llm()
        if not llm:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            st.stop()

        # Deduplication
        original_news_count = len(df)
        df = df.groupby('–û–±—ä–µ–∫—Ç', group_keys=False).apply(
            lambda x: fuzzy_deduplicate(x, '–í—ã–¥–µ—Ä–∂–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞', 65)
        ).reset_index(drop=True)
    
        remaining_news_count = len(df)
        duplicates_removed = original_news_count - remaining_news_count
        st.write(f"–ò–∑ {original_news_count} –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É–¥–∞–ª–µ–Ω—ã {duplicates_removed} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö. –û—Å—Ç–∞–ª–æ—Å—å {remaining_news_count}.")

        # Initialize progress
        progress_bar = st.progress(0)
        status_text = st.empty()
    
        # Process each news item
        df['Translated'] = ''
        df['Sentiment'] = ''
        df['Impact'] = ''
        df['Reasoning'] = ''
    
        for index, row in df.iterrows():
            translated_text = translate_text(llm, row['–í—ã–¥–µ—Ä–∂–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞'])
            df.at[index, 'Translated'] = translated_text
            
            sentiment = analyze_sentiment(translated_text)
            df.at[index, 'Sentiment'] = sentiment
            
            if sentiment == "Negative":
                impact, reasoning = estimate_impact(llm, translated_text, row['–û–±—ä–µ–∫—Ç'])
                df.at[index, 'Impact'] = impact
                df.at[index, 'Reasoning'] = reasoning
            
            # Update progress
            progress = (index + 1) / len(df)
            progress_bar.progress(progress)
            status_text.text(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {index + 1} –∏–∑ {len(df)} –Ω–æ–≤–æ—Å—Ç–µ–π")
            
            # Display results with color coding
            display_sentiment_results(row, sentiment, 
                                   impact if sentiment == "Negative" else None,
                                   reasoning if sentiment == "Negative" else None)
        
       
        sys.stdout = old_stdout
        
        # Prepare Excel file
        excel_output = create_output_file(df, uploaded_file)
        
        # Show success message
        st.success(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∑–∞ —É–º–µ—Ä–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.")
        
        # Create download section
        create_download_section(excel_output, output_capture)
        
        return df
        
    except Exception as e:
        sys.stdout = old_stdout
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        raise e

def create_analysis_data(df):
    analysis_data = []
    for _, row in df.iterrows():
        if row['Sentiment'] == 'Negative':
            analysis_data.append([
                row['–û–±—ä–µ–∫—Ç'], 
                row['–ó–∞–≥–æ–ª–æ–≤–æ–∫'], 
                '–†–ò–°–ö –£–ë–´–¢–ö–ê', 
                row['Impact'],
                row['Reasoning'],
                row['–í—ã–¥–µ—Ä–∂–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞']
            ])
    return pd.DataFrame(analysis_data, columns=[
        '–û–±—ä–µ–∫—Ç', 
        '–ó–∞–≥–æ–ª–æ–≤–æ–∫', 
        '–ü—Ä–∏–∑–Ω–∞–∫', 
        '–û—Ü–µ–Ω–∫–∞ –≤–ª–∏—è–Ω–∏—è',
        '–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ',
        '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'
    ])

def create_output_file(df, uploaded_file):
    wb = load_workbook("sample_file.xlsx")
    
    # Sort entities by number of negative publications
    entity_stats = pd.DataFrame({
        '–û–±—ä–µ–∫—Ç': df['–û–±—ä–µ–∫—Ç'].unique(),
        '–í—Å–µ–≥–æ': df.groupby('–û–±—ä–µ–∫—Ç').size(),
        '–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ': df[df['Sentiment'] == 'Negative'].groupby('–û–±—ä–µ–∫—Ç').size().fillna(0).astype(int),
        '–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ': df[df['Sentiment'] == 'Positive'].groupby('–û–±—ä–µ–∫—Ç').size().fillna(0).astype(int)
    }).sort_values('–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ', ascending=False)
    
    # Calculate most negative impact for each entity
    entity_impacts = {}
    for entity in df['–û–±—ä–µ–∫—Ç'].unique():
        entity_df = df[df['–û–±—ä–µ–∫—Ç'] == entity]
        negative_impacts = entity_df[entity_df['Sentiment'] == 'Negative']['Impact']
        entity_impacts[entity] = negative_impacts.iloc[0] if len(negative_impacts) > 0 else '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç'
    
    # Update '–°–≤–æ–¥–∫–∞' sheet
    ws = wb['–°–≤–æ–¥–∫–∞']
    for idx, (entity, row) in enumerate(entity_stats.iterrows(), start=4):
        ws.cell(row=idx, column=5, value=entity)  # Column E
        ws.cell(row=idx, column=6, value=row['–í—Å–µ–≥–æ'])  # Column F
        ws.cell(row=idx, column=7, value=row['–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ'])  # Column G
        ws.cell(row=idx, column=8, value=row['–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ'])  # Column H
        ws.cell(row=idx, column=9, value=entity_impacts[entity])  # Column I
    
    # Update '–ó–Ω–∞—á–∏–º—ã–µ' sheet
    ws = wb['–ó–Ω–∞—á–∏–º—ã–µ']
    row_idx = 3
    for _, row in df.iterrows():
        if row['Sentiment'] in ['Negative', 'Positive']:
            ws.cell(row=row_idx, column=3, value=row['–û–±—ä–µ–∫—Ç'])  # Column C
            ws.cell(row=row_idx, column=4, value='—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ')   # Column D
            ws.cell(row=row_idx, column=5, value=row['Sentiment']) # Column E
            ws.cell(row=row_idx, column=6, value=row['Impact'])   # Column F
            ws.cell(row=row_idx, column=7, value=row['–ó–∞–≥–æ–ª–æ–≤–æ–∫']) # Column G
            ws.cell(row=row_idx, column=8, value=row['–í—ã–¥–µ—Ä–∂–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞']) # Column H
            row_idx += 1
    
    # Copy '–ü—É–±–ª–∏–∫–∞—Ü–∏–∏' sheet
    original_df = pd.read_excel(uploaded_file, sheet_name='–ü—É–±–ª–∏–∫–∞—Ü–∏–∏')
    ws = wb['–ü—É–±–ª–∏–∫–∞—Ü–∏–∏']
    for r_idx, row in enumerate(dataframe_to_rows(original_df, index=False, header=True), start=1):
        for c_idx, value in enumerate(row, start=1):
            ws.cell(row=r_idx, column=c_idx, value=value)
    
    # Update '–ê–Ω–∞–ª–∏–∑' sheet
    ws = wb['–ê–Ω–∞–ª–∏–∑']
    row_idx = 4
    for _, row in df[df['Sentiment'] == 'Negative'].iterrows():
        ws.cell(row=row_idx, column=5, value=row['–û–±—ä–µ–∫—Ç'])  # Column E
        ws.cell(row=row_idx, column=6, value=row['–ó–∞–≥–æ–ª–æ–≤–æ–∫'])  # Column F
        ws.cell(row=row_idx, column=7, value="–†–∏—Å–∫ —É–±—ã—Ç–∫–∞")  # Column G
        ws.cell(row=row_idx, column=9, value=row['–í—ã–¥–µ—Ä–∂–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞'])  # Column I
        row_idx += 1
    
    # Update '–¢–µ—Ö.–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ' sheet
    tech_df = df[['–û–±—ä–µ–∫—Ç', '–ó–∞–≥–æ–ª–æ–≤–æ–∫', '–í—ã–¥–µ—Ä–∂–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞', 'Translated', 'Sentiment', 'Impact', 'Reasoning']]
    if '–¢–µ—Ö.–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ' not in wb.sheetnames:
        wb.create_sheet('–¢–µ—Ö.–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ')
    ws = wb['–¢–µ—Ö.–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ']
    for r_idx, row in enumerate(dataframe_to_rows(tech_df, index=False, header=True), start=1):
        for c_idx, value in enumerate(row, start=1):
            ws.cell(row=r_idx, column=c_idx, value=value)
    
    output = io.BytesIO()
    wb.save(output)
    output.seek(0)
    return output

def main():
    
    with st.expander("‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è"):
        st.markdown("""
        1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏
        2. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
        3. –°–∫–∞—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (Excel –∏/–∏–ª–∏ PDF)
        """)    
    
    st.markdown(
        """
        <style>
        .signature {
            position: fixed;
            right: 12px;
            up: 12px;
            font-size: 14px;
            color: #FF0000;
            opacity: 0.9;
            z-index: 999;
        }
        </style>
        <div class="signature">denis.pokrovsky.npff</div>
        """,
        unsafe_allow_html=True
    )
    
    st.title("::: –∞–Ω–∞–ª–∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –°–ö–ê–ù-–ò–ù–¢–ï–†–§–ê–ö–° (v.3.62):::")
    
    if 'processed_df' not in st.session_state:
        st.session_state.processed_df = None
    
    uploaded_file = st.file_uploader("–í—ã–±–∏—Ä–∞–π—Ç–µ Excel-—Ñ–∞–π–ª", type="xlsx")
    
    if uploaded_file is not None and st.session_state.processed_df is None:
        start_time = time.time()
        
        st.session_state.processed_df = process_file(uploaded_file)

       
        st.subheader("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
        preview_df = st.session_state.processed_df[['–û–±—ä–µ–∫—Ç', '–ó–∞–≥–æ–ª–æ–≤–æ–∫', 'Sentiment', 'Impact']].head()
        st.dataframe(preview_df)
        
        analysis_df = create_analysis_data(st.session_state.processed_df)
        st.subheader("–ê–Ω–∞–ª–∏–∑")
        st.dataframe(analysis_df)
        
        output = create_output_file(st.session_state.processed_df, uploaded_file)
        
        end_time = time.time()
        elapsed_time = end_time - start_time
        formatted_time = format_elapsed_time(elapsed_time)
        st.success(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∑–∞ {formatted_time}.")

        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞",
            data=output,
            file_name="—Ä–µ–∑—É–ª—å—Ç–∞—Ç_–∞–Ω–∞–ª–∏–∑–∞.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

if __name__ == "__main__":
    main()